1. If I don't create any constructor myself then default(no arg) constructor is created by JVM with empty implementation.

2. If I creates a single constructor then JVM will not create any default constructor.

3. We can give static & instance method name as className

4. Prototype for default constructors
    class Test {
        Test() {
            super();
        }
    }

    a. It is always no-arg constructors
    b. Access modifier of default constructor same as class modifire
    c. It is a no-arg call to super constructors

5. Modifires for constructors
    a. public
    b. <default>
    c. protected
    d. private

6. super() / this()
    a. we can use only inside constructor.
    b. we can use only in first line.
    c. we can use only one but not both simultaneously.
    d. these are constructor calls, to call super class and current class constructor.

7. super / this
    a. we can use anywhere except static area.
    b. we can use any no. of times.
    c. these are the keywords to refer super class and current class instance members.

8. normal class, abstract class can have constructors but interface can't have.

9. Constructors can throws exception

10. Default constructor cannot handle exception type IOException thrown by implicit super constructor. Must define an explicit constructor (child class)

------------------------------------------------------------------------------------------------------------

programmer's code                           |       compiler's code
                                            |       
1. class Test {                             |       1. class Test {   
                                            |           Test() {
                                            |               super();
                                            |           }
}                                           |       } 
                                            |
2. public class Test {                      |       2. public class Test { 
                                            |           public Test () {
                                            |               super();
                                            |           }
}                                           |       } 
                                            |
3. class test {                             |       3. class test { 
    void Test() {                           |           Test() { super(); }
                                            |           void Test() {}
    }                                       |
}                                           |       } 
                                            |
4. class Test {                             |       4. class Test {
    Test() {                                |           Test() {
                                            |               super();
    }                                       |           }
}                                           |       }
                                            |
5. class Test {                             |       5. class Test {
    Test (int i) {                          |           Test (int i) {
        // calling it's no arg const.       |               // calling it's no arg const.    
        this();                             |               this();
    }                                       |           }
    Test() {                                |           Test() {
                                            |               super();
    }                                       |           }
}                                           |       }
                                            |        
6. class Test {                             |       6. class Test {  
    Test (int i) {                          |           Test (int i) {
        // calling super class const.       |               // calling super class const.
        super();                            |               super(); 
    }                                       |           }
}                                           |       }
                                            |

-------------------------------------------------------------------------------------------------------